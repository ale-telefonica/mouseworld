#!/usr/bin/env python3
import sys

sys.path.append("lib")

from charms.osm.sshproxy import SSHProxyCharm
from ops.main import main


class SampleProxyCharm(SSHProxyCharm):
    def __init__(self, framework, key):
        super().__init__(framework, key)

        # Listen to charm events
        self.framework.observe(self.on.config_changed, self.on_config_changed)
        self.framework.observe(self.on.install, self.on_install)
        self.framework.observe(self.on.start, self.on_start)
        # self.framework.observe(self.on.upgrade_charm, self.on_upgrade_charm)

        # Listen to the touch action event
        {% for action in actions %}
        self.framework.observe(self.on.{{ action.name }}, self.on_{{ action.name }})
        {%endfor%}

    def on_config_changed(self, event):
        """Handle changes in configuration"""
        super().on_config_changed(event)

    def on_install(self, event):
        """Called when the charm is being installed"""
        super().on_install(event)

    def on_start(self, event):
        """Called when the charm is being started"""
        super().on_start(event)

    {% for action in actions %}
    {# Configure charm specific action here #}
    def on_{{ action.name }}(self, event):
        """Configure remote action."""

        if self.model.unit.is_leader():
            stderr = None
            try:
                {%if action.parameters%}
                {%for param in action.parameters%}
                {{param.name}} = event.params["{{param.name}}"]
                {%endfor%}
                {%endif%}
                ssh_hostname = self.model.config["ssh-hostname"]
                ssh_password = self.model.config["ssh-password"]
                ssh_username = self.model.config["ssh-username"]
                cmd = f"{{ action.command }}"
                proxy = self.get_ssh_proxy()
                stdout, stderr = proxy.run(cmd)
                event.set_results({"output": stdout})
            except Exception as e:
                event.fail("Action {} failed {}. Stderr: {}".format("{{ action.name }}", e, stderr))
        else:
            event.fail("Unit is not leader")
            
    {% endfor %}
    

if __name__ == "__main__":
    main(SampleProxyCharm)